{
  "hash": "88091339bf8e900459dc097a700780d5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"3: animations\"\nauthor: Carl Boettiger\ndate: \"2024-02-05\"\n---\n\n\nFollowing the same template, but we compute over a larger bounding box and generate an animation \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rstac)\nlibrary(gdalcubes)\nlibrary(stars)\nlibrary(tmap)\nlibrary(dplyr)\nearthdatalogin::gdal_cloud_config()\nearthdatalogin::with_gdalcubes()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbox <- c(xmin=-123, ymin=37, xmax=-122, ymax=38) \nstart_date <- \"2022-01-01\"\nend_date <- \"2022-06-30\"\nitems <-\n  stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") |>\n  stac_search(collections = \"sentinel-2-l2a\",\n              bbox = box,\n              datetime = paste(start_date, end_date, sep=\"/\"),\n              limit = 1000) |>\n  ext_query(\"eo:cloud_cover\" < 20) |>\n  post_request() |>\n  items_sign(sign_planetary_computer())\n```\n:::\n\n\nLet's do a true-color RGB image this time by combining data from Blue, Green, and Red bands:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol <- stac_image_collection(items$features, asset_names = c(\"B02\", \"B03\", \"B04\", \"SCL\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in stac_image_collection(items$features, asset_names = c(\"B02\", : STAC\nasset with name 'SCL' does not include eo:bands metadata and will be considered\nas a single band source\n```\n\n\n:::\n\n```{.r .cell-code}\ncube <- cube_view(srs =\"EPSG:4326\",\n                  extent = list(t0 = start_date, t1 = end_date,\n                                left = box[1], right = box[3],\n                                top = box[4], bottom = box[2]),\n                  dx = 0.001, dy = 0.001, dt = \"P1M\")\n\ndata <-  raster_cube(col, cube)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nndvi <- data |>\n  select_bands(c(\"B02\",\"B03\", \"B04\")) |>\n  write_ncdf(\"visual.nc\", overwrite=TRUE)\n```\n:::\n\n\nWhile we could go directly from `apply_pixel` to `animate`, here we show how to stash a copy of the computed, rescaled and reprojected data as a local netcdf file that can be used in any further analysis without going back to the original data. To continue our `gdalcubes` pipeline, we can easily load this space-time ncdf cube and continue as before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncdf_cube(\"visual.nc\") |>\n animate(rgb=3:1, \n         col = viridisLite::mako, fps=2, \n         save_as=\"visual.gif\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"visual.gif\"\n```\n\n\n:::\n:::\n\n\n\n![](visual.gif)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}