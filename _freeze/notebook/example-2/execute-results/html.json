{
  "hash": "93efb0b0cf3aada1017a4ad1c8793050",
  "result": {
    "markdown": "---\ntitle: \"2: Adding Polygons\"\nauthor: Carl Boettiger\ndate: \"2024-02-05\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rstac)\nlibrary(gdalcubes)\nlibrary(stars)\nlibrary(tmap)\nlibrary(dplyr)\n```\n:::\n\n\nWe read in a _spatial vector_ dataset with polygons using the Virtual Filesystem Interface (VSI) feature:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"/vsicurl/https://dsl.richmond.edu/panorama/redlining/static/mappinginequality.json\" \n\nredlines <- \n  url |>\n  st_read() |>\n  st_make_valid() |> \n  filter(st_is_valid(geometry))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `mappinginequality' from data source \n  `/vsicurl/https://dsl.richmond.edu/panorama/redlining/static/mappinginequality.json' \n  using driver `GeoJSON'\nSimple feature collection with 10150 features and 11 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -122.7675 ymin: 25.70537 xmax: -69.60044 ymax: 48.2473\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\nIn `sf` package, vector data looks almost like a normal tibble (`data.frame`), but with a special column (usually called \"geom\" or \"geometry\").  We can do the usual dplyr operations on the columns, e.g. to select just the redlining polygons in SF:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsf_redlines <- redlines |> filter(city == \"San Francisco\")\n```\n:::\n\n\nWe can use this as our bounding box from example 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbox <- st_bbox(sf_redlines)\n\nstart_date <- \"2022-06-01\"\nend_date <- \"2022-08-01\"\n\nitems <-\n  stac(\"https://earth-search.aws.element84.com/v0/\") |>\n  stac_search(collections = \"sentinel-s2-l2a-cogs\",\n              bbox = c(box),\n              datetime = paste(start_date, end_date, sep=\"/\"),\n              limit = 100) |>\n  ext_query(\"eo:cloud_cover\" < 20) |>\n  post_request()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncol <- stac_image_collection(items$features, asset_names = c(\"B08\", \"B04\", \"SCL\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in stac_image_collection(items$features, asset_names = c(\"B08\", : STAC\nasset with name 'SCL' does not include eo:bands metadata and will be considered\nas a single band source\n```\n:::\n\n```{.r .cell-code}\ncube <- cube_view(srs =\"EPSG:4326\",\n                  extent = list(t0 = start_date, t1 = end_date,\n                                left = box[1], right = box[3],\n                                top = box[4], bottom = box[2]),\n                  dx = 0.0001, dy = 0.0001, dt = \"P1D\",\n                  aggregation = \"median\", resampling = \"average\")\n\nmask <- image_mask(\"SCL\", values=c(3, 8, 9)) # mask clouds and cloud shadows\n\ndata <-  raster_cube(col, cube, mask = mask)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nndvi <- data |>\n  select_bands(c(\"B04\", \"B08\")) |>\n  apply_pixel(\"(B08-B04)/(B08+B04)\", \"NDVI\") |>\n  reduce_time(c(\"mean(NDVI)\")) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nndvi_stars <- st_as_stars(ndvi)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmako <- tm_scale_continuous(values = viridisLite::mako(30))\nfill <- tm_scale_continuous(values = \"Greens\")\n\ntm_shape(ndvi_stars) + tm_raster(col.scale = mako) + \n  tm_shape(sf_redlines) + tm_borders(\"grade\", lwd=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in value[[3L]](cond): could not rename the data.table\n```\n:::\n\n::: {.cell-output-display}\n![](example-2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n",
    "supporting": [
      "example-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}