{
  "hash": "085daa900a382c5ad3304a34a97bf7a4",
  "result": {
    "markdown": "---\ntitle: Fire Severity using Normalized Burn Index\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.12.1, GDAL 3.8.2, PROJ 9.3.1; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(tmap)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'tmap'\n\nThe following object is masked from 'package:datasets':\n\n    rivers\n```\n:::\n\n```{.r .cell-code}\nlibrary(rstac)\nlibrary(gdalcubes)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://34c031f8-c9fd-4018-8c5a-4159cdff6b0d-cdn-endpoint.azureedge.net/-/media/calfire-website/what-we-do/fire-resource-assessment-program---frap/gis-data/april-2023/fire221gdb.zip?rev=9e3e1e5e61e242d5b2994d666d72a91a&hash=F424990CD64BB7C4CF01C6CE211C0A59\"\ndownload.file(url, \"fire221.gdb.zip\",  mode=\"wb\")\n\nunzip(\"fire221.gdb.zip\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_polys <- \n  read_sf(\"fire22_1.gdb\", layer = \"firep22_1\") |> \n  filter(st_is_valid(Shape))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\njtree <- \n  read_sf(\"/vsicurl/https://huggingface.co/datasets/cboettig/biodiversity/resolve/main/data/NPS.gdb\") |> \n  filter(UNIT_NAME == \"Joshua Tree National Park\") |> \n  st_transform(st_crs(fire_polys))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_is_in_jtree <- st_intersects(fire_polys, jtree, sparse=FALSE)\nfire_jtree <- fire_polys |> filter(fire_is_in_jtree)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using one column matrices in `filter()` was deprecated in dplyr 1.1.0.\nℹ Please use one dimensional logical vectors instead.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"view\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to 'view'\n```\n:::\n\n```{.r .cell-code}\ntm_shape(jtree) + tm_polygons() + \n tm_shape(fire_jtree) + tm_polygons(\"YEAR_\")\n```\n:::\n\n\n\n\n## Landsat example\n\n\n\n::: {.cell}\n\n:::\n\n\n## Sentinel-2 Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbig_fire <- fire_jtree |> \n  filter(YEAR_ > \"2015\") |> \n  filter(Shape_Area == max(Shape_Area)) \n\nbig_fire\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 1 feature and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 328185.4 ymin: -432012.9 xmax: 330417.4 ymax: -430453.4\nProjected CRS: NAD83 / California Albers\n# A tibble: 1 × 20\n  YEAR_ STATE AGENCY UNIT_ID FIRE_NAME INC_NUM  ALARM_DATE         \n* <chr> <chr> <chr>  <chr>   <chr>     <chr>    <dttm>             \n1 2022  CA    NPS    JTP     ELK TRAIL 00008459 2022-05-26 00:00:00\n# ℹ 13 more variables: CONT_DATE <dttm>, CAUSE <int>, COMMENTS <chr>,\n#   GIS_ACRES <dbl>, C_METHOD <int>, OBJECTIVE <int>, FIRE_NUM <chr>,\n#   COMPLEX_NAME <chr>, COMPLEX_INCNUM <chr>, IRWINID <chr>,\n#   Shape_Length <dbl>, Shape_Area <dbl>, Shape <MULTIPOLYGON [m]>\n```\n:::\n\n```{.r .cell-code}\nbox <- big_fire |> st_transform(4326) |> st_bbox()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nitems <-  \n  stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\")  |>\n  stac_search(collections = \"sentinel-2-l2a\",\n              datetime = paste(\"2022-05-15\", \"2022-06-03\", sep=\"/\"),\n              bbox = c(box))  |>\n  post_request() |>\n  items_sign(sign_planetary_computer())\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}